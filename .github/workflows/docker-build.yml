name: Docker - Build & Push Images

on:
  workflow_call:
    inputs:
      services:
        description: 'Services to build (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      push_images:
        description: 'Whether to push images to registry'
        required: false
        default: true
        type: boolean
      image_tag:
        description: 'Custom image tag'
        required: false
        default: ''
        type: string
      platforms:
        description: 'Target platforms for multi-arch builds'
        required: false
        default: 'linux/amd64'
        type: string
    outputs:
      frontend_image:
        description: 'Frontend Docker image with tag'
        value: ${{ jobs.setup.outputs.frontend_image }}
      backend_api_image:
        description: 'Backend API Docker image with tag'
        value: ${{ jobs.setup.outputs.backend_api_image }}
      websocket_server_image:
        description: 'WebSocket Server Docker image with tag'
        value: ${{ jobs.setup.outputs.websocket_server_image }}
      ml_service_image:
        description: 'ML Service Docker image with tag'
        value: ${{ jobs.setup.outputs.ml_service_image }}
  
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated, or "all")'
        required: false
        default: 'all'
        type: string
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean
      image_tag:
        description: 'Custom image tag (optional)'
        required: false
        default: ''
        type: string
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64'
        type: string

# Allow concurrent builds but cancel outdated ones
concurrency:
  group: docker-build-${{ github.ref }}-${{ inputs.services || 'all' }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  REGISTRY: registry.digitalocean.com
  REGISTRY_NAMESPACE: ${{ vars.DO_REGISTRY_NAMESPACE }}

jobs:
  # Job 1: Setup and determine what to build
  setup:
    name: Setup Build Configuration
    runs-on: ubuntu-latest
    outputs:
      services_matrix: ${{ steps.config.outputs.services_matrix }}
      build_frontend: ${{ steps.config.outputs.build_frontend }}
      build_backend_api: ${{ steps.config.outputs.build_backend_api }}
      build_websocket_server: ${{ steps.config.outputs.build_websocket_server }}
      build_ml_service: ${{ steps.config.outputs.build_ml_service }}
      image_tag: ${{ steps.config.outputs.image_tag }}
      should_push: ${{ steps.config.outputs.should_push }}
      platforms: ${{ steps.config.outputs.platforms }}
      frontend_image: ${{ steps.config.outputs.frontend_image }}
      backend_api_image: ${{ steps.config.outputs.backend_api_image }}
      websocket_server_image: ${{ steps.config.outputs.websocket_server_image }}
      ml_service_image: ${{ steps.config.outputs.ml_service_image }}
    
    steps:
      - name: Configure build parameters
        id: config
        run: |
          # Determine services to build
          SERVICES="${{ inputs.services || 'all' }}"
          if [[ "$SERVICES" == "all" ]]; then
            SERVICES="frontend,backend-api,websocket-server,ml-service"
          fi
          
          echo "services_matrix=[$(echo $SERVICES | sed 's/,/","/g' | sed 's/^/"/; s/$/"/')]" >> $GITHUB_OUTPUT
          
          # Set individual service flags
          if [[ "$SERVICES" == *"frontend"* ]]; then
            echo "build_frontend=true" >> $GITHUB_OUTPUT
          else
            echo "build_frontend=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$SERVICES" == *"backend-api"* ]]; then
            echo "build_backend_api=true" >> $GITHUB_OUTPUT
          else
            echo "build_backend_api=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$SERVICES" == *"websocket-server"* ]]; then
            echo "build_websocket_server=true" >> $GITHUB_OUTPUT
          else
            echo "build_websocket_server=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$SERVICES" == *"ml-service"* ]]; then
            echo "build_ml_service=true" >> $GITHUB_OUTPUT
          else
            echo "build_ml_service=false" >> $GITHUB_OUTPUT
          fi
          
          # Determine image tag
          if [[ -n "${{ inputs.image_tag }}" ]]; then
            IMAGE_TAG="${{ inputs.image_tag }}"
          else
            IMAGE_TAG="${GITHUB_SHA:0:8}-$(date +%s)"
          fi
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          # Other configurations
          echo "should_push=${{ inputs.push_images }}" >> $GITHUB_OUTPUT
          echo "platforms=${{ inputs.platforms }}" >> $GITHUB_OUTPUT
          
          # Generate full image names for outputs
          REGISTRY="${{ env.REGISTRY }}"
          NAMESPACE="${{ env.REGISTRY_NAMESPACE }}"
          
          echo "frontend_image=$REGISTRY/$NAMESPACE/frontend:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "backend_api_image=$REGISTRY/$NAMESPACE/backend-api:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "websocket_server_image=$REGISTRY/$NAMESPACE/websocket-server:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ml_service_image=$REGISTRY/$NAMESPACE/ml-service:$IMAGE_TAG" >> $GITHUB_OUTPUT
          
          echo "üèóÔ∏è Building services: $SERVICES"
          echo "üè∑Ô∏è Image tag: $IMAGE_TAG"
          echo "üì§ Push to registry: ${{ inputs.push_images }}"
          echo "üñ•Ô∏è Platforms: ${{ inputs.platforms }}"

  # Job 2: Build application code
  build-code:
    name: Build Application Code
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.services_matrix != '[]'
    timeout-minutes: 20
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services_matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.service }}
        run: npm run build -- --filter="@portfolio/${{ matrix.service }}"
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: |
            apps/${{ matrix.service }}/dist/
            apps/${{ matrix.service }}/build/
            apps/${{ matrix.service }}/.next/
            apps/${{ matrix.service }}/package.json
          retention-days: 1

  # Job 3: Build and push Docker images
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [setup, build-code]
    timeout-minutes: 45
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services_matrix) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.setup.outputs.platforms }}

      - name: Log in to DigitalOcean Container Registry
        if: needs.setup.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DO_REGISTRY_TOKEN }}
          password: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: apps/${{ matrix.service }}/

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}
          tags: |
            type=raw,value=${{ needs.setup.outputs.image_tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=${{ matrix.service }}
            org.opencontainers.image.description=Portfolio ${{ matrix.service }} service
            org.opencontainers.image.vendor=Portfolio Project
            org.opencontainers.image.version=${{ needs.setup.outputs.image_tag }}

      - name: Check if Dockerfile exists
        id: dockerfile-check
        run: |
          if [[ -f "apps/${{ matrix.service }}/Dockerfile" ]]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Dockerfile found for ${{ matrix.service }}"
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå No Dockerfile found for ${{ matrix.service }}"
          fi

      - name: Build and push Docker image
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: ${{ needs.setup.outputs.should_push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ needs.setup.outputs.platforms }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            SERVICE_NAME=${{ matrix.service }}
            BUILD_VERSION=${{ needs.setup.outputs.image_tag }}
            NODE_ENV=production

      - name: Fail build if Dockerfile missing
        if: steps.dockerfile-check.outputs.dockerfile_exists == 'false'
        run: |
          echo "‚ùå ERROR: No Dockerfile found for ${{ matrix.service }}"
          echo ""
          echo "üîß REQUIRED: Create a Dockerfile at apps/${{ matrix.service }}/Dockerfile"
          echo ""
          echo "üìù Dockerfile template needed for ${{ matrix.service }}:"
          echo "   - Must expose port 3000"
          echo "   - Must include health check endpoint at /health"
          echo "   - Must use proper multi-stage build"
          echo "   - Must run as non-root user"
          echo ""
          echo "üö´ Dynamic Dockerfile generation has been removed for security reasons."
          echo "   Each service must have its own properly audited Dockerfile."
          exit 1

      - name: Image security scan (Trivy)
        if: needs.setup.outputs.should_push == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}:${{ needs.setup.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        if: needs.setup.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results-${{ matrix.service }}
          path: trivy-results-${{ matrix.service }}.sarif
          retention-days: 7
        continue-on-error: true

  # Job 4: Test Docker images
  docker-test:
    name: Test Docker Images
    runs-on: ubuntu-latest
    needs: [setup, docker-build]
    if: needs.setup.outputs.should_push == 'true'
    timeout-minutes: 15
    
    strategy:
      matrix:
        service: ${{ fromJson(needs.setup.outputs.services_matrix) }}
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DO_REGISTRY_TOKEN }}
          password: ${{ secrets.DO_REGISTRY_TOKEN }}

      - name: Test Docker image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ matrix.service }}:${{ needs.setup.outputs.image_tag }}"
          
          echo "üß™ Testing Docker image: $IMAGE"
          
          # Pull the image
          docker pull $IMAGE
          
          # Test image can start
          CONTAINER_ID=$(docker run -d -p 3000:3000 $IMAGE)
          
          echo "‚è≥ Waiting for container to start..."
          sleep 10
          
          # Check if container is running
          if docker ps | grep -q $CONTAINER_ID; then
            echo "‚úÖ Container is running"
            
            # Test health endpoint if available
            if curl -f -s --max-time 5 http://localhost:3000/health > /dev/null; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è Health check not available or failed (this might be expected)"
            fi
          else
            echo "‚ùå Container failed to start"
            docker logs $CONTAINER_ID
            exit 1
          fi
          
          # Clean up
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID
          
          echo "‚úÖ Docker image test completed for ${{ matrix.service }}"

  # Job 5: Build summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [setup, build-code, docker-build, docker-test]
    if: always()
    
    steps:
      - name: Generate build summary
        run: |
          echo "# üê≥ Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Services:** ${{ needs.setup.outputs.services_matrix }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tag:** ${{ needs.setup.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Push to Registry:** ${{ needs.setup.outputs.should_push }}" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms:** ${{ needs.setup.outputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job status
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.build-code.result }}" == "success" ]]; then
            echo "‚úÖ Code Build: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Code Build: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "‚úÖ Docker Build: SUCCESS" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Docker Build: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-test.result }}" == "success" ]]; then
            echo "‚úÖ Docker Test: SUCCESS" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.docker-test.result }}" == "failure" ]]; then
            echo "‚ùå Docker Test: FAILED" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è Docker Test: SKIPPED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Built images
          if [[ "${{ needs.setup.outputs.should_push }}" == "true" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## üì¶ Built Images" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.setup.outputs.build_frontend }}" == "true" ]]; then
              echo "- **Frontend:** \`${{ needs.setup.outputs.frontend_image }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ needs.setup.outputs.build_backend_api }}" == "true" ]]; then
              echo "- **Backend API:** \`${{ needs.setup.outputs.backend_api_image }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ needs.setup.outputs.build_websocket_server }}" == "true" ]]; then
              echo "- **WebSocket Server:** \`${{ needs.setup.outputs.websocket_server_image }}\`" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [[ "${{ needs.setup.outputs.build_ml_service }}" == "true" ]]; then
              echo "- **ML Service:** \`${{ needs.setup.outputs.ml_service_image }}\`" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Overall status
          if [[ "${{ needs.build-code.result }}" == "success" && "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚úÖ Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚ùå Build Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please check the failed jobs above for details." >> $GITHUB_STEP_SUMMARY
          fi