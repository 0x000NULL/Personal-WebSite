name: CI - Code Quality & Tests

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'package.json'
      - 'turbo.json'
      - 'tsconfig.json'
      - '.github/workflows/ci.yml'
  push:
    branches: [main, develop]
    paths:
      - 'apps/**'
      - 'packages/**'
      - 'package.json'
      - 'turbo.json'
      - 'tsconfig.json'
      - '.github/workflows/ci.yml'

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality Checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: |
          npm run format
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Code is not properly formatted. Run 'npm run format' to fix."
            git diff
            exit 1
          else
            echo "✅ Code is properly formatted"
          fi

      - name: TypeScript type checking
        run: npm run typecheck

  # Job 2: Unit & Integration Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality
    
    strategy:
      matrix:
        test-group: [unit, integration]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-group }} tests
        run: |
          echo "🧪 Running ${{ matrix.test-group }} tests..."
          
          # Try filtered tests first
          if npm run test -- --filter="*${{ matrix.test-group }}*"; then
            echo "✅ ${{ matrix.test-group }} tests passed"
          else
            TEST_EXIT_CODE=$?
            echo "❌ ${{ matrix.test-group }} tests failed with exit code: $TEST_EXIT_CODE"
            
            # Check if the filter found any packages
            echo "🔍 Checking available packages for testing..."
            npm run test -- --filter="*${{ matrix.test-group }}*" --dry-run || {
              echo "⚠️  No packages found matching pattern '*${{ matrix.test-group }}*'"
              echo "📋 Available packages:"
              find apps packages -name "package.json" -type f | head -10
              echo "💡 Consider adjusting the test-group matrix or package naming"
            }
            
            # Fail the job - do not mask the failure
            exit $TEST_EXIT_CODE
          fi
        env:
          CI: true

      - name: Upload test coverage
        if: matrix.test-group == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/*/coverage/
            packages/*/coverage/
          retention-days: 7

  # Job 3: Build Validation
  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: code-quality
    
    strategy:
      matrix:
        service: [frontend, backend-api, websocket-server, ml-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.service }}
        run: npm run build -- --filter="@portfolio/${{ matrix.service }}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: |
            apps/${{ matrix.service }}/dist/
            apps/${{ matrix.service }}/build/
            apps/${{ matrix.service }}/.next/
          retention-days: 1

  # Job 4: Docker Build Test (without push)
  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, build-validation]
    
    strategy:
      matrix:
        service: [frontend, backend-api, websocket-server, ml-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.service }}
          path: apps/${{ matrix.service }}/

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.service }}/Dockerfile
          push: false
          tags: portfolio/${{ matrix.service }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 5: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, tests, build-validation, docker-build-test]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "## CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
            echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.tests.result }}" == "success" ]]; then
            echo "✅ Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-validation.result }}" == "success" ]]; then
            echo "✅ Build Validation: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build Validation: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "✅ Docker Build Test: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker Build Test: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Fail if any critical job failed
          if [[ "${{ needs.code-quality.result }}" != "success" ]] || \
             [[ "${{ needs.tests.result }}" != "success" ]] || \
             [[ "${{ needs.build-validation.result }}" != "success" ]] || \
             [[ "${{ needs.docker-build-test.result }}" != "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **CI Pipeline Failed** - Please check the failed jobs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All CI checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi